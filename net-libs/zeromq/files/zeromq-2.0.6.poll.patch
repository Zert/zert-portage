--- include/zmq.h.orig	2010-03-16 13:24:30.000000000 -0400
+++ include/zmq.h	2010-05-25 07:38:23.218330648 -0400
@@ -180,11 +180,18 @@
 #define ZMQ_SNDBUF 11
 #define ZMQ_RCVBUF 12
 
+/* For zmq_getsockopt(3) */
+#define ZMQ_APP_THREAD 126
+#define ZMQ_WAITFD     127
+#define ZMQ_EVENTS     128     /* To be used as bitmask ZMQ_EVENTS | ZMQ_POLLIN | ZMQ_POLLOUT */
+
 #define ZMQ_NOBLOCK 1
 #define ZMQ_NOFLUSH 2
 
 ZMQ_EXPORT void *zmq_socket (void *context, int type);
 ZMQ_EXPORT int zmq_close (void *s);
+ZMQ_EXPORT int zmq_getsockopt(void *s, int option, void *optval, 
+    size_t optvallen);
 ZMQ_EXPORT int zmq_setsockopt (void *s, int option, const void *optval,
     size_t optvallen); 
 ZMQ_EXPORT int zmq_bind (void *s, const char *addr);
@@ -215,6 +222,19 @@
 
 ZMQ_EXPORT int zmq_poll (zmq_pollitem_t *items, int nitems, long timeout);
 
+//  Process whatever outstanding work within application thread.
+//  To be used in combination with zmq_getsockopt(3):
+//      void* app_thread;
+//      zmq_getsockopt(s, ZMQ_APP_THREAD, &app_thread, sizeof(void*));
+//      int fd, events;
+//      zmq_getsockopt(s, ZMQ_WAITFD, &fd, sizeof(int));
+//      ... do poll(3) call on fd ...
+//      zmq_process(app_thread);
+//      zmq_getsockopt(s, ZMQ_EVENTS | ZMQ_POLLIN, &events, sizeof(int));
+//      if (events & ZMQ_POLLIN)
+//          ... 0MQ socket has data ...
+ZMQ_EXPORT int zmq_process (void *app_thread_);
+
 ////////////////////////////////////////////////////////////////////////////////
 //  Experimental.
 ////////////////////////////////////////////////////////////////////////////////
--- src/zmq.cpp.orig	2010-03-16 13:24:30.000000000 -0400
+++ src/zmq.cpp	2010-05-25 10:36:24.784885719 -0400
@@ -33,6 +33,7 @@
 #include "config.hpp"
 #include "err.hpp"
 #include "fd.hpp"
+#include "app_thread.hpp"
 
 #if defined ZMQ_HAVE_LINUX || defined ZMQ_HAVE_FREEBSD ||\
     defined ZMQ_HAVE_OPENBSD || defined ZMQ_HAVE_SOLARIS ||\
@@ -629,6 +630,58 @@
 #endif
 }
 
+int zmq_getsockopt(void *socket_, int option, void* optval, size_t optvallen)
+{
+    switch (option) {
+        case ZMQ_APP_THREAD: {
+            if (optvallen != sizeof(void*)) {
+                errno = EINVAL;
+                break;
+            }
+            *(void**)optval = ((zmq::socket_base_t*)socket_)->get_thread();
+            return 0;
+        }
+        case ZMQ_WAITFD: {
+            if (optvallen != sizeof(int)) {
+                errno = EINVAL;
+                break;
+            }
+            void* app_thread = ((zmq::socket_base_t*)socket_)->get_thread();
+            *(int*)optval = app_thread ? 
+                ((zmq::app_thread_t*)app_thread)->get_signaler()->get_fd() : -1;
+            return 0;
+        }
+        case ZMQ_EVENTS | ZMQ_POLLIN:
+        case ZMQ_EVENTS | ZMQ_POLLOUT:
+        case ZMQ_EVENTS | ZMQ_POLLIN | ZMQ_POLLOUT: {
+            if (optvallen != sizeof(unsigned int)) {
+                errno = EINVAL;
+                break;
+            }
+            unsigned int events = (unsigned int) option ^ ZMQ_EVENTS;
+            *(unsigned int*)optval = 0;
+            if ((ZMQ_POLLOUT & events) && ((zmq::socket_base_t*)socket_)->has_out ())
+                *(unsigned int*)optval |= ZMQ_POLLOUT;
+            if ((ZMQ_POLLIN  & events) && ((zmq::socket_base_t*)socket_)->has_in ())
+                *(unsigned int*)optval |= ZMQ_POLLIN;
+            return 0;
+        }
+        default:
+            errno = ENOPROTOOPT;
+    }
+    return -1;
+}
+
+int zmq_process(void *app_thread_)
+{
+    //  Process 0MQ commands if needed.
+    if (app_thread_) {
+        ((zmq::app_thread_t*)app_thread_)->process_commands (false, false);
+        return 0;
+    }
+    return -1;
+}
+
 int zmq_errno ()
 {
     return errno;
